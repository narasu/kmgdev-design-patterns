@startuml

skin rose
title KMGDEV - Design Patterns

<style> 
note {
  BackgroundColor #white
}
</style>

' START interface definitions
interface IState {
  +Scratchpad ObjectData
  +void Enter()
  +void Update(float _delta)
  +void Exit()
}

interface IStateRunner {
  +Scratchpad ObjectData
  +StateMachine FSM
}

interface IPickup {
  +object PickUp()
}

interface IWeapon {
  +int Ammo
  +float Damage
  +float FireRate
  +void Fire(float _delta)
}

interface IPoolable {
  +bool IsActive
  +void OnEnableObject()
  +void OnDisableObject()
}

' END interface definitions


' START class definitions
static class EventManager {
  -{static} Dictionary<Type,Delegate> eventDictionary
  +{static} void Subscribe(Type _type, Delegate _function)
  +{static} void Unsubscribe(Type _type, Delegate _function)
  +{static} void Invoke(object _event)
  +{static} bool InvokeCallback(object _event, out object _callback)
}

class Scratchpad {
  -Dictionary<Type, object> pad
  +void Create(object _data)
  +T Read<T>()
  +void Update(object _data)
  +void Delete(Type _type)
}

class StateMachine {
  -Dictionary<Type, IState> states
  -IState currentState
  +void Update(float _delta)
  +void AddState(IState _state)
  +void SwitchState(Type _nextState)
}

abstract AbstractState {
  +StateMachine OwnerStateMachine
}

class ObjectPool<T:IPoolable> {
  -List<T> activePool
  -List<T> inactivePool
  +T RequestObject()
  +bool TryGetActiveObjects(out T[] _objects)
  +void ReturnObjectToPool(T _item)
  -T AddNewItemToPool()
  -T ActivateItem(T _item)
}

class Enemy <<MonoBehaviour>>
note top
  <b>Invokes:</b>
  WeaponPickedUpEvent
end note

class WeaponSpawner <<MonoBehaviour>>
note right
  <b>Invokes:</b>
  WeaponSpawnedEvent
end note

class WeaponHandler {
  -IWeapon currentWeapon
  -Queue<IWeapon> weaponQueue
  +new()
  +void Update(float _delta)
  -void TryGetNewWeapon()
  ' -void OnWeaponOutOfAmmo(WeaponOutOfAmmoEvent _event)
  ' -void OnWeaponPickedUp(WeaponPickedUpEvent _event)
}
note bottom
  <b>Subscribed to:</b>
  WeaponOutOfAmmoEvent
  WeaponPickedUpEvent
  <b>Invokes:</b>
  OutOfWeaponsEvent
end note

class WeaponData <<ScriptableObject>> {
  +int Ammo
  +float Damage
}

class Weapon {
  -float fireRate
  -Timer fireRateTimer
  +new(WeaponData _weaponData)
}
note bottom
  <b>Invokes:</b>
  WeaponFiredEvent
  WeaponOutOfAmmoEvent
end note

class WeaponPickup <<MonoBehaviour>> {
}

class BulletManager <<MonoBehaviour>> {
  -ObjectPool<Projectile> projectilePool
}
note right
  <b>Subscribed to:</b>
  WeaponFiredEvent
  BulletDestroyedEvent
end note

class Projectile {
  +float Damage
  -Timer timeUntilHit
  +void Update(float _delta)
  -void Hit()
}
note bottom
  <b>Invokes:</b>
  BulletDestroyedEvent
end note

class AttackState
note bottom
  <b>Subscribed to:</b>
  OutOfWeaponsEvent
end note

class WeaponSearchState
note bottom
  <b>Subscribed to:</b>
  OutOfWeaponsEvent
end note

class EvadeState

' END class definitions

' START event definitions

note right of EventManager 
  <b>Event Types</b>
  
  ===
  OutOfWeaponsEvent
  ---
  WeaponOutOfAmmoEvent
  ---
  WeaponSpawnedEvent {
    +Transform SpawnedWeapon
  }
  ---
  WeaponPickedUpEvent {
    +WeaponData PickedUpWeaponData
    +Transform PickupTransform
  }
  ---
  WeaponFiredEvent {
    +float Damage
  }
  ---
  BulletDestroyedEvent {
    +Projectile DestroyedBullet
  }
end note

' END event definitions

IStateRunner *-up- Scratchpad
IStateRunner *-left- StateMachine
IStateRunner <|.down. Enemy

IState <-up- StateMachine
IState <|.down. AbstractState

StateMachine <-down- AbstractState
AbstractState <|-down- AttackState
AbstractState <|-down- WeaponSearchState
AbstractState <|-down- EvadeState

Enemy *-left- WeaponHandler
Enemy *-down- AttackState
Enemy *-down- EvadeState
Enemy *-down- WeaponSearchState

WeaponHandler -left-> IWeapon
IWeapon <|.down. Weapon
Weapon -left-> WeaponData

WeaponSpawner -down-> WeaponData
IPickup <|.down. WeaponPickup
WeaponData <-left- WeaponPickup

BulletManager *-up- ObjectPool
BulletManager -left-> Projectile

IPoolable <|.down. Projectile
IPoolable -right-* ObjectPool

@enduml